use EPrints;

use strict;

use Data::Dumper;
use Sort::Naturally;

my $session = EPrints::Session->new();


my $repo = $session->get_repository();
my $content = "text/xml";
$session->send_http_header( content_type=>$content );
my $family = $session->param( "_name_family" );
my $given = $session->param( "_name_given" );
my $id = $session->param( "_lshtmid" );

################################################
#Step 1 : Lookup the name (family only) in LDAP#
################################################

# LDAP tunables
my $ldap_host = "authldap.lshtm.ac.uk";
my $dn = "cn=ulcceprintsproxy,ou=proxyusers,ou=resources,o=lshtm";

use Net::LDAPS;
my $ldap = Net::LDAPS->new($ldap_host,
		  port => '636',
		  verify => 'none');
unless( $ldap )
{
	print STDERR "LDAP error: $@\n";
	print STDERR "LDAP broke!! going native (any users)...\n";
}
#print STDERR "Have an LDAP connection\n";

# Get password for the search-bind-account
#my $repoid = $repo->get_id;
#my $dir = $repoid;
#$dir =~ s/test/-test/;
#my $ldappass = `cat /www/$dir/eprints3/archives/$repoid/cfg/ldap.passwd`;
my $ldap_loc = $repo->get_conf("ldap_pw_location");
my $ldappass = `cat $ldap_loc`;

chomp($ldappass);

my $mesg = $ldap->bind( $dn, password=>$ldappass );
if( $mesg->code() ){
	print STDERR "LDAP Bind error: " . $mesg->error() . "\n";
	exit;
}
#print STDERR "LDAP bound using $dn\n";

# Distinguished name (and attributes needed later on) for this user
my $result = $ldap->search (
       base    => "o=lshtm",
       scope   => "sub",
       filter  => "sn=$family",
       attrs   =>  ['1.1', 'uid', 'sn', 'cn', 'givenname', 'mail', 'LSHTMPayrollNo', 'eduPersonScopedAffiliation', 'LSHTMeDirCtx'],
);

#####################################################################################################
#Step 2: Build a hash keyed with the hashed uid (can be switch if appropriate) from results of query#
#####################################################################################################

my @entrs = $result->entries;
my $lshtm_authors = {};
if(!defined @entrs || scalar @entrs == 0 ){
#	print STDERR "No entry found for $family\n";
}else{
	for my $entr(@entrs){
		next if(! defined $entr->get_value( "cn" ));

		$lshtm_authors->{Digest::MD5::md5_hex( $entr->get_value( "cn" ) )} = {
			name=> {family => $entr->get_value( "sn" ), given =>  $entr->get_value( "givenName" )},
			id => $entr->get_value("mail"), 
			lshtmid => Digest::MD5::md5_hex( $entr->get_value( "cn" ) )};
#		print STDERR "Have LDAP entry Surname: ".$entr->get_value( "sn" )." Given Name: ".$entr->get_value( "givenName" )." lshtmid: ".$entr->get_value( "cn" )." Email: ".$entr->get_value( "mail" )."\n";

	}
}
#Bye LDAP thanks for all your help....
$ldap->unbind if $ldap;

##################################################
#Step 3: Query the EPrints database for existing #
#authors. This is based on lookup/name but we    #
#will use lshtmid instead of id( email)          #
##################################################

my $database = $session->get_database;
my $dataset = $session->dataset( "eprint" );
my $name_field = $dataset->get_field( "creators_name" );
my $id_field = $dataset->get_field( "creators_lshtmid" );
my $email_field = $dataset->get_field( "creators_id" );


my @fields = ($name_field->get_sql_names, $id_field->get_sql_names, $email_field->get_sql_names);

my $Q_table = $database->quote_identifier($dataset->get_sql_table_name);
my $Q_name_table = $database->quote_identifier($dataset->get_sql_sub_table_name($name_field));
my $Q_id_table = $database->quote_identifier($dataset->get_sql_sub_table_name($id_field));
my $Q_email_table = $database->quote_identifier($dataset->get_sql_sub_table_name($email_field));
my $Q_eprintid = $database->quote_identifier( "eprintid" );
my $Q_pos = $database->quote_identifier( "pos" );
my $Q_num_matches = $database->quote_identifier( "num_matches" );
my $Q_eprint_status = $database->quote_identifier( "eprint_status" );

my $sql = "SELECT COUNT($Q_table.$Q_eprintid) ".$database->sql_AS." $Q_num_matches," .
	join(",", map { $database->quote_identifier($_) } @fields) .
	" FROM $Q_table" .
	" LEFT JOIN $Q_name_table" .
	" ON $Q_table.$Q_eprintid=$Q_name_table.$Q_eprintid" .
	" LEFT JOIN $Q_id_table" .
	" ON $Q_name_table.$Q_eprintid=$Q_id_table.$Q_eprintid " .
	" AND $Q_name_table.$Q_pos=$Q_id_table.$Q_pos " .
	" LEFT JOIN $Q_email_table" .
	" ON $Q_name_table.$Q_eprintid=$Q_email_table.$Q_eprintid " .
	" AND $Q_name_table.$Q_pos=$Q_email_table.$Q_pos " .
	" WHERE " .
	" $Q_table.$Q_eprint_status=".$database->quote_value( "archive" );
if( EPrints::Utils::is_set( $family ) )
{
	$sql .= " AND ".$database->quote_identifier("creators_name_family").$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($family).'%');
}
if( EPrints::Utils::is_set( $given ) )
{
	$sql .= " AND ".$database->quote_identifier("creators_name_given").$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($given).'%');
}
if( EPrints::Utils::is_set( $id ) )
{
#	$sql .= " AND lower(".$database->quote_identifier("creators_id").") ".$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($id).'%');
	$sql .= " AND ".$database->quote_identifier("creators_id").$database->sql_LIKE().$database->quote_value(EPrints::Database::prep_like_value($id).'%');

}
$sql .= "GROUP BY ".join(",",map { $database->quote_identifier($_) } @fields) .
	" ORDER BY $Q_num_matches DESC," .
	$database->quote_identifier("creators_name_family").",".
	$database->quote_identifier("creators_name_given");

#print STDERR $sql."\n";
my @rows;
my $sth = $session->get_database->prepare_select( $sql, 'limit' => 40 );
$session->get_database->execute( $sth , $sql );

######################################################################
#Step 4: Now we update the $lshtm_authors hash we reated from LDAP   #
#data or add entries if we have an author with an lshtmid (thi may be#
#true of those who have since lieft and been removed from LDAP       #
######################################################################

while( my @row = $sth->fetchrow_array )
{
	my $cnt = shift @row;
	my $name = $name_field->value_from_sql_row( $session, \@row );
	my $lshtmid = $id_field->value_from_sql_row( $session, \@row );
	my $email = $email_field->value_from_sql_row( $session, \@row );

#	print STDERR "Entry for: ".$name->{family}." , ".$name->{given}." ($lshtmid)\n";

	if(defined $lshtm_authors->{$lshtmid}->{cnt}){
		$lshtm_authors->{$lshtmid}->{cnt} += $cnt;
	}else{
		$lshtm_authors->{$lshtmid} = {cnt=> $cnt, name=> $name, id => $email, lshtmid => $lshtmid};
	}
}

##########################################################################
#Step 5: Now we create the traditional lookup output with the merged data#
##########################################################################
#sort the given names.. alphabetically?
my @keys = sort {$lshtm_authors->{$a}->{name}->{given} cmp $lshtm_authors->{$b}->{name}->{given} } keys %$lshtm_authors;
#my @keys = sort {ncmp($lshtm_authors->{name}->{given}->{$a},$lshtm_authors->{name}->{given}->{$b}) } keys %$lshtm_authors;


for my $lshtmid(@keys){
#while(my ($lshtmid,$data) = each(%$lshtm_authors)){
	my $data = $lshtm_authors->{$lshtmid};
	next if(!defined $data->{lshtmid} || $data->{lshtmid} eq "");

	my $item = {};
	push @rows, $item;
	
	my $normalised_given = join " ", map {ucfirst(lc($_))} split /[\s-]/, $data->{name}->{given};

	my $frag = $session->make_doc_fragment;
	$frag->appendChild($repo->make_text(ucfirst(lc($data->{name}->{family})).", ".$normalised_given));

	if(defined $data->{cnt}){
		$frag->appendChild( $session->html_phrase( 'cgi/lookup/name:authored', count => $session->make_text( $data->{cnt} ) ) );
	}
	$item->{xhtml} = $frag;
		$item->{values} = [
		"for:value:relative:_name_family" => ucfirst(lc($data->{name}->{family})),
		"for:value:relative:_name_given" => $normalised_given,
		"for:value:relative:_name_honourific" => $data->{name}->{honourific},
		"for:value:relative:_name_lineage" => $data->{name}->{lineage},
		"for:value:relative:_id" => $data->{id},
		"for:value:relative:_email" => $data->{id},
		"for:value:relative:_lshtmid" => $data->{lshtmid},

	];
}
$sth->finish();

my $ul = EPrints::Extras::render_lookup_list( $session, \@rows );

$session->send_http_header( content_type => "text/xml; charset=UTF-8" );

binmode(STDOUT,":utf8");
print <<END;
<?xml version="1.0" encoding="UTF-8" ?>

END
print EPrints::XML::to_string( $ul, "utf-8", 1 );

EPrints::XML::dispose( $ul );

$session->terminate;

